                      Mini-projet 1 : solveur DPLL récursif
                             fichier RENDU
                       (à remplir obligatoirement)

**Un mini-projet sans fichier RENDU rempli ne recevra pas de note.**

Date limite: 3 novembre 2023, 23h59

Identité
--------
Nombre de binôme: `42`
- Nom : `PARIS`, Prénom : Albin
- Nom : `YAZICI`, Prénom : Servan


Questions sur votre code
------------------------
0. Avez-vous testé que `make dpll` s'exécute sans erreurs ou warnings,
   et que ensuite `./dpll sudoku-4x4.cnf` donne la réponse attendue (voir
   fichier README) ?

Oui, tout fonctionne `bien` et donne la réponse attendue

---

1. Avez-vous utilisé la fonction `filter_map` (donné dans dpll.ml)
   dans votre implémentation de `simplifie` ? 
   - Si oui, expliquez en quelques phrases en français comment vous
     l'avez utilisée.
   - Si non, expliquez en quelques phrases en français comment
     fonctionne votre implémentation de `simplifie`.


Oui, nous avons utilisé `filter_map`.

`Filter_map` prend une fonction `f`, et une liste `l` et renvoie une nouvelle liste `l'` qui correspond à la liste qui contient tout x appartenant à `l`, tel que `f x = Some(_)`.
On se sert de `filter_map` dans la fonction `simplifie`, pour supprimer les clauses qui contiennent le litteral `x` mis en paramètre (avec notre fonction auxiliaire `filter_clause`), mais aussi pour supprimer `-x` dans les autres clauses (avec notre fonction auxiliaire `filter_opposite`).

---

2. Pour l'implémentation de `unitaire`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ? (Par une
   fonction auxiliaire, on entend ici soit une fonction d'une
   bibliothèque, par exemple des fonctions comme `List.length`,
   `List.rev_append`, ou une fonction `aux_unitaire` que vous avez
   écrite vous-mêmes.) Expliquez en quelques phrases en français
   comment ces fonctions auxiliaires sont utilisées dans votre
   implémentation de la fonction `unitaire`.

Pour `unitaire`, on se sert de la fonction `List.length`, `List.hd`, `List.find`. On sait qu'un littéral est unitaire, si la clause à laquelle il appartient est de longueur `1`. Donc avec `List.find`, on cherche une sous-liste (`clause`) qui a une longueur `1` puis avec `List.hd` on renvoie le premier élément.
Si `List.find` ne trouve pas de sous-liste qui correspond à la condition (= trouver une clause de taille `1`), alors on `catch` l'erreur et on renvoie `None`.

---

3. Pour l'implémentation de `pur`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ?  Expliquez en
   quelques phrases en français comment ces fonctions auxiliaires sont
   utilisées dans votre implémentation de la fonction `pur`.

Pour l'implémentation de `pur`, on utilise une fonction auxiliaire récursive terminale appelé `trouve`. Elle possède `2 listes` en argument
- Dans un premier temps on utilise `List.flatten` pour obtenir une `int list` à la place d'une `int list list`.
Cette `int list` correspond à l'ensemble des `littéraux` présents dans la CNF, cette liste contient *(potentiellement)* des `doublons`. Pour la suite de l'explication, nommons cette liste `allLiteral`.
- On a également une deuxieme liste nommée `doublons` qui contiendra les `valeurs absolues` des littéraux `non-pur`. On ne prend que la valeur absolue car si `l` n'est pas `pur` alors `-l` ne l'est pas non plus. Au départ cette liste est `vide`

On va parcourir la liste `allLiteral` récursivement
- Si on arrive à la fin de la liste `allLiteral`, on renvoie `None` car cela signifie qu'il n'y a pas de littéral pur.
- Si la liste est de la forme `x::xs`, avec `x` le premier élément de la liste en argument, et `xs` la suite de cette liste, on va vérifier `3` choses :
1. On vérifie si `abs(x)` appartient à doublons, si c'est le cas, on refait appel à `trouve` avec `xs`, sans changer `doublons` car `abs(x)` y appartient déjà.
2. Si `abs(x)` n'appartient pas à `doublons`, mais que `-x` apparait dans `xs`, `x` n'est donc `pas pur`, on continue en ajoutant `abs(x)` à `doublons`
3. Sinon, `x` est alors `pur`, on renvoie `Some x`.

On se sert de la `valeur absolue` pour `réduire` la taille de la liste de doublons. Sinon cette liste va contenir `x` et `-x` à la fois ce qui est `inutile`.

---

4. Donnez un exemple d'une formule pour laquelle les deux fonctions
   `solveur_split` et `solveur_dpll_rec` ont un comportement
   différent, et expliquez les différences entre ces deux fonctions.

Prenons l'exemple de la `formule` présente dans le fichier `SAT/ii8a2.cnf`.
Dans un premier temps, les résultats obtenus sont les mêmes. La différence est sur la `durée d'attente` pour la réponse. En effet avec `solveur_dpll_rec` le temps d'attente est presque inexistant alors que pour le solveur_split il faut attendre très longtemps avant d'obtenir une réponse (>15 min). 

Cette différence s'explique par le fait que `solveur_split` ne fait aucune stratégie, elle choisit toujours de `simplifier` la CNF par le premier littéral. Cette fonction va parcourir `entièrement` l'arbre des possibilités. 
Alors que `solveur_dpll_rec` va commencer par simplifier par les `clauses unitaires`, puis les litteraux `purs` puis ensuite va choisir le premier littéral qu'elle trouve.

---

5. Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

N'hésitez pas à lire les commentaires dans le fichier `"dpll.ml`.
Il y a certaines explications concernant notre façon d'implémenter des morceaux de code.

---

--fin du fichier RENDU--